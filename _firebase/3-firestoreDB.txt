■ Firestore 세팅
  ● 파이어베이스 콘솔 메뉴
    빌드 / firestore Database 
    데이터베이스 만들기
    임의의 개발 모드 선택 (개발시 test 모드 권장)
    위치설정
      서울 : asia-northease3
      (참고 : https://firebase.google.com/docs/functions/locations?hl=ko)
    ▶ 회원시스템 : Authenthication 
      - 시작하기버튼 클릭  
      - 필요한 기능 추가
    ▶ 데이터베이스 : Firestore Database
      - 데이터베이스 만들기 클릭
      - 프로덕션 모드에서 시작
      - 위치 설정
    ▶ 저장소 : Storage
    ▶ 호스팅 : Hosting
    ▶ rules탭의 권한설정 true로 변경

■ 문서 추가
  ● setDoc() //id수동생성
    import { doc, setDoc, getFirestore } from "firebase/firestore";
    const db = getFirestore();
    await setDoc(doc(db, "컬렉션네임", "문서id"), {
      id: "123456789",
      name: "홍길동",
      country: "대한민국"
    });

  ● addDoc() //id자동생성
    import { collection, doc, addDoc, getFirestore} from "firebase/firestore";
    var data = {
      id: "123456789",
      name: "홍길동",
      country: "대한민국",
      favorites : {
        hobby : '영화',
        color : '노랑색'
      }
    }
    const db = getFirestore();
    await addDoc(collection(db,"컬렉션네임"),data); 
    
  ● setDoc() //id자동생성
    import { collection, doc, setDoc, getFirestore } from "firebase/firestore";
    var data = {
      name: "hong",
      gender: "mail",
      tel:"010-000-0000",
      favorites : {
        hobby : 'movie',
        color : 'red'
      }
    }
    const db = getFirestore();
    const refCollection = doc(collection(db, "student"));
    await setDoc(refCollection, data);

  ● 중첩컬렉션 문서추가
    import { collection, doc, setDoc, getFirestore } from "firebase/firestore"; 
    var data = {
      name: "jane",
      gender: "femail",
      tel:"010-000-0000",
      favorites : {
        hobby : 'movie',
        color : 'red'
      }
    }
    const db = getFirestore();
    const refCollection = doc(collection(db,"student/docID/friends"));
    await setDoc(refCollection, data);

■ 문서 가져오기 (읽기 , 참조)
  ● 단일문서 가져오기
    import { doc, getDoc, getFirestore } from "firebase/firestore";
    const db = getFirestore();
    const docRef = doc(db, "컬렉션네임", "문서id");
    const docSnap = await getDoc(docRef);
    if (docSnap.exists()) {
      console.log("Document data:", docSnap.data());
    } else {
      console.log("No such document!");
    }

  ● 콜렉션의 전체문서 가져오기
    import { collection, getDocs, getFirestore} from "firebase/firestore";
    const db = getFirestore();
    const querySnapshot = await getDocs(collection(db, "컬렉션네임"));
    querySnapshot.docs.forEach((doc) => {
      console.log(doc.id, " : ", doc.data());
    });

  ● 필터 쿼리
    //주의 : 필터와 정렬을 두개이상 동시에 사용해야 할 경우 관리자 모드 / Cloud Firestore / 색인설정
    import { collection, query, where, getDocs, getFirestore} from "firebase/firestore";
    const db = getFirestore();
    const q = query(collection(db, "컬렉션네임"), where("키이름", "==", "키값"));
    const querySnapshot = await getDocs(q);
    querySnapshot.docs.forEach((doc) => {
      console.log(doc.id, " => ", doc.data());
    });

  ● 정렬 및 제한 쿼리
    //주의 : 필터와 정렬을 두개이상 동시에 사용해야 할 경우 관리자 모드 / Cloud Firestore / 색인설정
    import { query, orderBy, limit, getFirestore} from "firebase/firestore";
    const db = getFirestore();
    const q = query(collection(db, "컬렉션네임"), orderBy("키이름","asc"), limit(3)); //오름차순
    //const q = query(collection(db, "컬렉션네임"), orderBy("키이름","desc"), limit(3)); //내림차순
    //const q = query(collection(db, "컬렉션네임"), orderBy("키이름1"), orderBy("키이름1","desc"),); //여러필드기준정렬
    const querySnapshot = await getDocs(q);
    querySnapshot.docs.forEach((doc) => {
      console.log(doc.id, " => ", doc.data());
    });

  ● 실시간 업데이트 수신 대기
    import { doc, onSnapshot ,getFirestore} from "firebase/firestore";
    const db = getFirestore();
    const unsub = onSnapshot(doc(db, "컬렉션이름", "문서id"), (doc) => {
        console.log("Current data: ", doc.data());
    });

  ● 중첩컬렉션 전체 문서 가져오기  
    import { getDocs, collection, getFirestore} from "firebase/firestore"; 
    const db = getFirestore();
    const snapShot = await getDocs(collection(db,'컬렉션이름/문서id/서브컬렉션이름'));
    snapShot.docs.forEach((doc) => { 
      console.log (doc.data ())
    })

  ● 색인관리
    https://firebase.google.com/docs/firestore/query-data/indexing?hl=ko#exemptions

■ 문서 업데이트
  ● updateDoc
    import { doc, updateDoc, getFirestore} from "firebase/firestore";
    const db = getFirestore();
    const docRef = doc(db, "컬렉션이름", 문서id);
    await updateDoc(docRef, {
      필드네임1: '값',
      '필드네임2.obj': 'blue', //필드 값이 객체일경우 예시
    });

  ● 중첩컬렉션 문서 업데이트
    import { collection , doc, updateDoc, getFirestore} from "firebase/firestore";
    const db = getFirestore();
    const snapShot = doc(db,'컬렉션이름/문서id/서브컬렉션이름', '서브문서id');
    await updateDoc(snapShot, {
      필드네임1:'값1',
      필드네임2:'값2'
    });

■ 문서 삭제
  ● 단일 문서 삭제
    import { doc, deleteDoc, getFirestore} from "firebase/firestore";
    const db = getFirestore();
    await deleteDoc(doc(db, "컬렉션이름", "문서id"));
  
  ● 문서 필드 삭제
    import { doc, updateDoc, deleteField, getFirestore} from "firebase/firestore";
    const db = getFirestore();
    const docRef = doc(db, '컬렉션이름', '문서id');
    await updateDoc(docRef, {
        필드네임: deleteField()
    });

  ● 중첩 문서 삭제
    import { doc, deleteDoc, getFirestore} from "firebase/firestore";
    const db = getFirestore();
    await deleteDoc(doc(db, '컬렉션이름/문서id/서브컬렉션이름', '서브문서id'));

■ 문서 일괄 작업
  ● 컬렉션 전체 문서 필드 수정
    import {collection, doc, deleteDoc, getFirestore,writeBatch} from "firebase/firestore
    const db = getFirestore();
    const batch = writeBatch(db);
    const querySnapshot = await getDocs(collection(db, "컬렉션네임"));
    querySnapshot.forEach((v) => {
        const docRef = doc(db, "컬렉션네임", v.id);
        batch.update(docRef,{필드명:필드값}); 
    });
    await batch.commit();

  ● 컬렉션 전체 문서 삭제
    import {collection, doc, deleteDoc, getFirestore,writeBatch} from "firebase/firestore
    
    //await문법
    const db = getFirestore();
    const batch = writeBatch(db);
    const querySnapshot = await getDocs(collection(db, "컬렉션네임"));
    querySnapshot.forEach((v) => {
        const docRef = doc(db, "컬렉션네임", v.id);
        batch.delete(docRef); 
    });
    await batch.commit();

    //then문법
    const db = getFirestore();
    const batch = writeBatch(db);
    const querySnapshot =  getDocs(collection(db, uid)).then((querySnapshot)=>{
      querySnapshot.forEach((v) => {
        const docRef = doc(db, uid, v.id);
        batch.delete(docRef);
      })//forEach
      batch.commit().then(()=>{
        console.log('전체문서삭제완료')
      })//batch then
    })//getDoc then
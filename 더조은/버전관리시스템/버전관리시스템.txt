버전관리시스템
  - 형상관리시스템
  - 유의미한 변화의 시간대 기록
  - Git(CLI(console line interface)를 이용, GUI환경:source tree)

SourceTree 설치
  - 설치순서
    - https://atlassian.com/ko 로그인
    - https://www.sourcetreeapp.com/ 소스트리 다운로드
    - bigbucket 설치 건너뛰기
    - git, mercurial 중 필요한 프로그램 선택 후 설치
    - SSH key 옵션은 취소
    
  - 언어설정
    도구메뉴 / 옵션 / 일반 / repo setting / english, utf-8

SourceTree 저장소(repositories) 관리
  - repository(저장소) 옵션
    - clone
      원격저장소(GitHub)가 이미 생성되어 있는 경우

    - add
      이미 생성된 저장소를 불러오기
      .git폴더가 존재하는 저장소를 불러오기

    - create
      - 처음 저장소 폴더 등록 
      - 등록된 폴더는 .git이라는 숨김폴더가 생성이 됨
      - .git 폴더를 제거하면 버전관리 모든 히스토리가 제거됨

    - 주의
      - 등록된 저장소폴더의 폴더명을 변경하지 말것
      - 폴더명을 변경할 경우
        1. 소스트리, 작업중인 모든 폴더 종료
        2. 소스트리에서 등록된 이전 저장소를 삭제
        3. 재등록 (add 옵션 이용!)

버전관리 기초용어
  - 버전만들기
    - file status 패널 / unstaged files
      변화가 생긴 파일 목록을 보여준다
    - file status 패널 / staged files
      버전을 등록할 파일을 보여준다
    - commit
      버전을 등록한다
      (! 주의사항 : commit message를 자세하게 등록)
    - history 패널 
      버전의 역사를 확인

  - 버전이동
    - 체크아웃 : 특정 버전으로 이동하는 행위
    - HEAD branch : 현재 이동한 버전
  
  - gitIgnore
    - 원격과 연동하거나 공유하면 안되는 폴더나 파일목록
    - 저장소 설정(ctrl + shift + ,) / advanced 파일에서 ignore 설정 edit
    - 사용예시 : file.txt, folder/
    - 로컬저장소 생성시, 파일생성전 .gitIgnore파일을 설정하길 권장

- branch
  - 다른 버전의 진행방향을 관리
  - 주의사항 : 이전버전으로 체크아웃 후 수정을 하기전 반드시 브런치를 생성해야 함
  - 수정이 끝난 버전은 마스터와 mergeㅜㅠ 
    1. 마스터 브런치로 체크아웃
    2. 병합할 브런치를 우클릭 후 merge
    3. 충돌(conflict) 해결
    4. 병합된 브런치는 제거
  - fast-forward
    - 마스터 브런치의 마지막 커밋에서 새로운 버전을 생성후 머지할 경우
  - reset
    - 특정 커밋으로 돌아간다. (해당 커밋의 이후 커밋들을 제거한다)
  - revert (reverse)
    - 한단계 전 커밋을 복사해서 최종커밋으로 등록
    - 예시 ) 3일차작업에서 1일차 작업으로 돌아갈 경우
        1. 3일차를 reverse (2일차가 최종커밋으로 복사되서 등록)
        2. 2일차를 reverse (1일차가 최종커밋으로 복사되서 등록)

  - GitHub 연동작업
    - 연동순서
      - 우측상단의 회원메뉴 / your repositories
      - new(녹색아이콘), 원격저장소(origin)생성
        저장소삭제 : 사용자메뉴 / your repositories / 저장소 선택 / setting(톱니바퀴아이콘) / 하단의 delete this repository

      - 깃허브 토근생성
        1. 회원메뉴 / settings / developer settings(왼쪽하단) / personal access token / generate new token
        2. note 메세지 추가, 토큰 유효기간 설정, repo메뉴에 체크
        3. 토큰번호를 저장해 놓기 (잃어버리면 토큰을 다시 만들어야함)
      - 소스트리 설정
        1. 로컬저장소 생성
        2. remote / add
        3. remote name는 default remote를 체크하여 origin으로 생성
        4. 깃허브 저장소 주소(url) 입력
        5. username : 깃허브 저장소 로그인 아이디
        6. 첫번째 push작업시 메세지발생(no-helper)
          ! 업로드시 authentication, stream, token등의 메세지 오류발생시 
            - 내컴퓨터/c:/사용자/사용자폴더/appdata(숨김폴더)/local/atlassian/sourcetree/passwd파일 제거
            - 소스트리 재실행
            - repository메뉴 / setting(shift + ctrl + ,) / edit / 오류점검
            - push
        7. 새로운 pc환경에서 소스트리와 github를 연동할 경우
          - clone (이미 생성된 원격 저장소의 내용을 동기화)
          - source path/url입력창에 깃허브 저장소 주속입력
            파일이 업로드된 저장소의 주소확인방법 : 깃허브 사용자메뉴/your repositories/저장소 선택/ code에 http주소 복사
          - clone버튼 입력 후 토큰번호 입력            

    - 연동방법
      - push : 로컬저장소의 커밋을 원격저장소에(origin) 업로드
              주의! 브런치가 여러버전으로 존재할 경우 모든 브런치를 업로드 권장
      - pull : 원격저장소(orgin)로부터 로컬저장소로 다운로드(동기화)
              주의! 브런치가 여러버전으로 존재할 경우 모든 브런치를 다운로드 권장

    
    - 연동오류해결 (동일한 파일)
      1. 원인파악 : 깃허브의 커밋히스토리와 로컬의 커밋히스토리를 비교
      2. 오류지점 이후 수정된 파일 백업
      3. 오류지점 이전으로 리셋
      4. pull
      5. 원본파일과 수정파일 비교 수정 후 커밋

    - 연동오류해결 (최종작업이 push가 안되어있을경우)
      1. 최종작업을 push하지 않은 경우 (집에서 푸쉬안하고 학원에 왔다)
        - 최종 작업이 push전까지 작업을 진행해서는 안된다
        - 불가피하게 작업을 해야한다면 저장소를 백업 후 백업파일에서 작업한다
      
      2. 최종작업을 pull하지 않고 추가 작업을 진행했을 경우
        - github의 origin 커밋과 로컬 커밋의 히스토리를 비교 (소스트리의 브런치가 분리된 부분)
        - 분리되기 전 커밋을 선택후 리셋(hard option)후 pull을 실행

      3. 최종작업을 pull 하지 않고 새로운 branch 버전을 생성했을 경우
        - 백업
        - github의 origin 커밋과 로컬 커밋의 히스토리를 비교
        - 최종으로 동일한 커밋으로 reset(hard)후 pull 실행
        - 생성하고자 했던 branch를 생성
        - 백업본을 저장소폴더로 복원

github 협업
  - 협업과정
    팀장
      - 대표저장소 1개를 원격에 생성
      - 저장소 설정메뉴 / collaborators / add people / 팀원들 아이디 추가

    팀원
      - 회원가입시 이메일 주소로 이동
      - view invitation 클릭 (깃허브 화면으로 이동)
      - 허락
      - 초대받은 저장소를 확인시에는 홈아이콘을 이용
    
    연동
      - 프로젝트 폴더 생성
      - 소스트리의 클론을 이용해서 로컬 저장소와 연동
      - 토큰을 입력해야 할 경우 회원각자의 토큰을 사용하면 됨

    탈티시키기
      - 저장소의 설정메뉴 collaboators / remove
    탈퇴하기
      - 회원설정메뉴/ setting / repositories/ 저장소선택 / leave

    협업순서
      1. 팀장 회의 후 IA(정보구조, 사이트맵, 분담)
      2. 프로젝트 폴더, 이미지, 파일등을 구조 설계
      3. 원격저장소 생성 후 로컬저장소(create)와 연동 
      4. 원격저장소로 프로젝트 push
      5. 팀원초대


협업시 주의사항과 충돌해결
  - 주의사항
    - 작업전 pull 실행
    - push전에 pull을 반드시 실행
    - 담당파일만 수정하자
      (수정이 필요한 경우)
      담당자에게 요청
      담당자는 수정 후 커밋후 pull push
      팀원들에게 공지
      팀원들은 현재 작업중인 상황을 commit후 pull 이후 작업 또는 push

    - 브런치나 리셋 리버트를 하지 않는다

  - 작업전 또는 push전에 pull을 실행하지 않앗을 경우
    - 수정한 파일을 백업을 받는다
    - push전의 커밋으로 리셋
    - 복원전 반드시 pull을 실행
    - 복원
    - 커밋
    - pull 실행후 push
    
  - 하나의 파일을 다수의 인원이 작업했을경우
    - 원격저장소의 commit history(시계아이콘) 클릭후 detail 수정파일과 겹치는 파일이 있는지 검토
    - 수정한 파일을 백업을 받는다
    - 수정한 파일의 원래 담당자의 파일도 백업 받는다
    - 두 파일을 비교하여 충돌을 해결
    - 수정을 한 작업자는 문제발생 이전의 커밋으로 리셋
    - 복원전 반드시 pull을 실행
    - 수정을 한 작업자가 본인의 로컬저장소에 복원을 한다
    - 최종 수정자가 파일을 복원 (수정된 파일을 절대 지우면 안됨)
    - 커밋
    - pull 실행후 push 
    - 파일을 팀원들에게 전달해서 수정요청 

    다른 팀원들
      - 자신이 작업중이거나 수정한 모든파일들을 백업을 한다(보내준 파일은 반드시 제외한다)
      - 브런치 분기전으로 reset을 해야함
      - pull
      - 받은파일과 백업받은 파일들을 저장소에 복원한다
      - commit
      - pull push


  - 최후의 방법
    - 팀장이 파일을 취합한다.
    - 취합된 결과물로 처음부터 다시 연동한다



  - 커밋을 최소화한다 (커밋전에 pull 실행)
    - 예시: 작업시작전 pull, commit 메세지입력까지 준비, pull, commit, pull, push
  - 커밋메세지에 작업자 이름과 메세지를 자세하게 입력한다

css작성시 주의사항
  태그로 시작되는 선택자 금지
  style sheet는 담당파일에서 사용한뒤 작업이 모두 완료되면 취합한다
  자주사용되는 class명을 피한다
  담당하는 파일외 수정작업이 필요시 담당자에게 요청한다
  선택자는 상위부터 호출한다
  style guide수정시 공지한다

js 작성시 주의사항
  여러파일에서 사용되는 컴퍼넌트파일에서 에러가 존재하면 push하면 안된다
  여러파일에서 사용되는 컴퍼넌트 파일에서는 alert나 log명령어를 push하지 않는다
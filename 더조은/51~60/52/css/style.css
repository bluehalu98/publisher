/* stlye guide
*{
  color: inherit;  상속받아라(reset css에 포함)
}
나눔체, 노토(선생님 선호!), 맑은고딕, ..... 
serif : 꺽이는 글자(디자인성)
sans serif : 꺽이지 않는 글자(가독성)
노토 산스 폰트
<link href="https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@100;300;400;500;700;900&display=swap" rel="stylesheet">
font-family: 'Noto Sans KR', sans-serif;

나눔고딕 폰트
<link href="https://fonts.googleapis.com/css2?family=Nanum+Gothic:wght@400;700;800&display=swap" rel="stylesheet">
font-family: 'Nanum Gothic', sans-serif;

montserrat 영어 폰트
<link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@100;200;300;400;500;600;700;800;900&display=swap" rel="stylesheet">
font-family: 'Montserrat', sans-serif;

raleway 폰트
<link href="https://fonts.googleapis.com/css2?family=Raleway:wght@100;200;300;400;500;600;700;800;900&display=swap" rel="stylesheet">
font-family: 'Raleway', sans-serif;

fontsawesome
<script src="https://kit.fontawesome.com/5c078cf8a0.js" crossorigin="anonymous"></script>
폰트 링크는 최상단에 권장, 최소 style css링크보다 상단에 위치해야 사용가능
*/
:root{
  /* 
  document개념(최상위), 이곳에서 --를 이용해서 저장을해야 모든객체에서
  값을 불러와서 사용가능
  */
  --main-color:#445678;
}
/*
h1{
  color:var(--main-color); root에서 매인컬러를 저장해놓고 호출 
}
*/
body{
  color: #333;
  font-size: 14px;/* em은 16px의 배수인 단위, em은 다른 객체에게 줄경우 부모기준으로 배수를 단위로 갖는다 */
  font-weight: normal;
  font-style: normal;
  text-decoration: none;
  line-height: 160%;/* reset에서 inherit를 쓸경우 중첩이 되기때문에 여기서만 설정 */
}
.perspective{
  margin: 30px auto;
  width: 200px;
  height: 300px;
  perspective: 700px;
  border: 5px solid blue;
}
.perspective .sheet{
  width: inherit;
  height: inherit;
  border: 1px solid black;
  position:relative;
  transform-style: preserve-3d;
  transform: rotateY(0deg);
  transition: transform 1s;
}
.perspective:hover .sheet{
  transform:rotateY(180deg);
}
.perspective .sheet div{
  width: inherit;
  height: inherit;
  text-align: center;
  line-height: 300px;
  font-size: 2em;
  color: white;
  position: absolute;
  backface-visibility: hidden;/* 90도 이상 회전한 객체 */
}
.perspective .front{background-color: skyblue;}
.perspective .back{
  background-color: pink;
  transform: rotateY(180deg);

}

.door-container{
  width: 400px;
  height: 400px;
  border: 1px solid #ccc;
  margin: 30px auto;
  perspective: 700px;
  display: flex;
  background-color: black;
}
.door-left{
  transform-origin: left center;
  transform: rotateY(0deg);
}
.door-left.active{transform: rotateY(-180deg);}
.door-right{
  transform-origin: right center;
  transform: rotateY(0deg);
}
.door-right.active{transform: rotateY(180deg);}
.door-container>div{
  width: 200px;
  height: 400px;
  position: relative;
  transform-style: preserve-3d;
  transition: all 1s;
}
.door-container>div>div{
  width: 200px;
  height: 400px;
  text-align: center;
  line-height: 400px;
  color: #fff;
  font-size: 2em;
  position: absolute;
  backface-visibility: hidden;
}
.front{
  background-color: blue;
}
.back{
  transform: rotateY(180deg);
  background-color: red;
}
.door-btn{
  display: block;
  margin:0 auto;
  border: 1px solid #333;
}


.cube-btns{text-align: center;}
.cube-container{
  margin: 70px auto;
  width: 300px;
  height: 300px;
  perspective: 700px;
}
.cube{
  width: 300px;
  height: 300px;
  position: relative;
  transform-style: preserve-3d;
  transition: all 1s;
}
.cube.rotate-front{transform: rotateX(0deg) rotateY(0deg) ;}
.cube.rotate-back{transform: rotateX(0deg) rotateY(180deg) ;}
.cube.rotate-right{transform: rotateX(0deg) rotateY(90deg) ;}
.cube.rotate-left{transform: rotateX(0deg) rotateY(-90deg) ;}
.cube.rotate-top{transform: rotateY(0deg) rotateX(-90deg) ;}
.cube.rotate-bottom{transform: rotateY(0deg) rotateX(90deg) ;}



.cube div{
  opacity: 0.5;
  position: absolute;
  width: 300px;
  height: 300px;
  text-align: center;
  line-height: 300px;
  color:#fff;
  font-size: 2em;
 /*  backface-visibility: hidden; */
}
.cube-front{
  background-color:blue;
  transform: translateZ(150px);
}
.cube-back{
  transform: rotateY(180deg) translateZ(150px);
  background-color:green;
}
.cube-right{
  background-color: red;
  transform: rotateY(-90deg) translateZ(150px)
}
.cube-top{
  transform: rotateX(90deg) translateZ(150px);
  background-color: black;
}
.cube-bottom{
  transform: rotateX(-90deg) translateZ(150px);
  background-color: gray;
}

.cube-left{
  transform: rotateY(90deg) translateZ(150px);
  background-color: yellow;
}





.cube2{
  animation: cube 3s infinite linear;
}
@keyframes cube{
  0%{
    transform: rotateX(0deg) rotateY(0deg) scaleX(1)scaleY(1)scaleZ(1);
  }
  50%{
    transform: rotateX(180deg) rotateY(180deg) scaleX(0.5)scaleY(0.5)scaleZ(0.5);
  }
  100%{
    transform: rotateX(360deg) rotateY(360deg) scaleX(1)scaleY(1)scaleZ(1);
  }
}